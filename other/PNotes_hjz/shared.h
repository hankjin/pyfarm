#ifndef __SHARED_H__
#define __SHARED_H__

#include <shlwapi.h>

#include "menu.h"

typedef enum _ddiff {SECOND, MINUTE, HOUR, DAY, WEEK, MONTH, YEAR} ddiff;

void DrawComboItem(const DRAWITEMSTRUCT * lpd);
short DockIndex(int dockData);
int DockType(int dockData);
void SaveNewDockData(HWND hwnd, int dockData);
void SetDockIndex(int * dockData, short index);
HWND MoveDockWindow(HWND hwnd, int dockType, short index);
PDOCKHEADER DHeader(int dockType);
void BitOff(int * data, int position);
void BitOn(int * data, int position);
BOOL IsBitOn(int data, int position);
int GetBit(int data, int position);
//int GetGroupsCount(void);
//void DeleteGroup(int id);
//void GetAllGroups(void);
//void AddGroup(P_PNGROUP pg);
//int NewGroupId(void);
//P_PNGROUP GetGroup(int id);
//void FreeGroups(void);
//void SaveGroup(P_PNGROUP ppg);
//P_PNGROUP GetGroups(void);
void ConstructDateTimeString(const LPSYSTEMTIME lpSt, wchar_t * lpBuffer, BOOL bWithMilliseconds);
void GetPNotesMessage(const wchar_t * lpDir, const wchar_t * lpFile, const wchar_t * lpKey, const wchar_t * lpDefault, wchar_t * lpMessage);
void SetGroupText(HWND hwnd, int idGroup, int id, const wchar_t * lpFile, const wchar_t * lpDefault);
BOOL DoesAnySkinExist(wchar_t * lpSkin);
void SetDlgCtlText(HWND hwnd, int id, const wchar_t * lpFile, const wchar_t * lpDefault);
void SetMenuText(int id, const wchar_t * lcpSection, const wchar_t * lcpFile, wchar_t * lpDefault, wchar_t * lpBuffer);
void SetMenuTextWithAccelerator(int id, const wchar_t * lpSection, const wchar_t * lpFile, wchar_t * lpDefault, wchar_t * lpBuffer, const wchar_t * lpAcc);
void FillSkins(HWND hwnd, const wchar_t * lpSkinCurrent, BOOL fAllSkins, BOOL fShowNoSkin);
BOOL FileExists(wchar_t * lpDir, wchar_t * lpFile);
void DrawSkinPreview(HWND hwnd, P_NOTE_RTHANDLES pH, P_NOTE_APPEARANCE pA, COLORREF crMask, const DRAWITEMSTRUCT * lpDI);
// HBITMAP GetSkinById(HWND hWnd, UINT id, wchar_t* szFile);
void GetSkinProperties(HWND hWnd, P_NOTE_RTHANDLES pH, wchar_t * lpSkinFile, BOOL bDeletePrevious);
void ChangeSkinPreview(HWND hwnd, int idList, int idPvw, P_NOTE_RTHANDLES pH, wchar_t * lpTempSkin, BOOL fDeletePrev);
BOOL IsFontsEqual(const LOGFONTW * lf1, const LOGFONTW * lf2);
// HBRUSH GetEditBrush(HBITMAP hSkin, wchar_t * lpSkinFile);
// void GetRectForSkinCtl(UINT idRes, LPRECT lpRect, wchar_t * lpSkinFile);
void ShowPopUp(HWND hwnd, HMENU hMenu);
void SetMIText(MItem * lpMI, const int size, int id, const wchar_t * lpText);
void CenterWindow(HWND hwnd, BOOL fSetDefSize);
void GetTooltip(wchar_t * lpTip, PMItem pItems, int size, UINT id);
void GetSubPathW(wchar_t * lpResult, const wchar_t * lpFile);
void ParseDateFormat(wchar_t * lpFormat, wchar_t * lpDFormat, wchar_t * lpTFormat);
void FillSkinlessNoteCaption(HDC hdc, LPRECT lprc, COLORREF clr, LPRECT lprGrip);
void DrawSimpleNotePreview(HWND hwnd, const DRAWITEMSTRUCT * lpDI, 
	LPRECT lprWindow, LPRECT lprCaption, P_NOTE_APPEARANCE pA, P_NOTE_RTHANDLES pH);
BOOL ChangeSkinlessColor(HWND hwnd, LPCOLORREF lpcrWindow, int id);
int ChangeSkinlessCaptionFont(HWND hwnd, LPLOGFONTW plfCaption, LPCOLORREF lpcrCaption, P_NOTE_RTHANDLES ptH, int id);
void SendNoteByEmail(PMEMNOTE pNote);
BOOL NotesDirExists(wchar_t * lpDir);
BOOL NotesDirCreate(wchar_t * lpDir);
void CreateColorMenu(HMENU hMenu, int * idMenu, const int idStart, wchar_t * lpCaption);
int GetMaxSizeMenuID(void);
void CreateSizeMenu(HMENU * pMenu, BOOL fCreate);
void RemoveSizeMenu(void);
void SetCFSize(int size);
int GetCFSize(void);
UINT APIENTRY CCHookProc(HWND hdlg,	UINT uiMsg,	WPARAM wParam, LPARAM lParam);
UINT APIENTRY CFHookProc(HWND hdlg,	UINT uiMsg,	WPARAM wParam, LPARAM lParam);
void ConstructSaveMessage(wchar_t * lpNoteName, wchar_t * lpBuffer);
HBITMAP GetSkinById(HWND hWnd, UINT id, const wchar_t* szFile);
void LoadSearchHistory(HWND hwnd);
void LoadReplaceHistory(HWND hwnd);
int SharedFindProc(HWND hEdit);
int SharedReplaceProc(HWND hEdit);
void SaveSearchHistory(HWND hwnd);
void SaveReplaceHistory(HWND hwnd);
void PrepareDockMenu(PMEMNOTE pNote, HMENU hMenu, int index);
int GetMenuPosition(HMENU hMenu, int id);
void DrawSimpleNotePreviewDock(HWND hwnd, const DRAWITEMSTRUCT * lpDI, P_PNDOCK pA, COLORREF crFont, P_NOTE_RTHANDLES pH);
void DrawSkinPreviewDock(HWND hwnd, P_NOTE_RTHANDLES pH, P_PNDOCK pA, COLORREF crMask, COLORREF crFont, const DRAWITEMSTRUCT * lpDI);
void ApplyDockColors(PMEMNOTE pNote);
void SetMIImageIndex(MItem * lpMI, const int size, int id, const int idImg);
int GetMIImageIndex(MItem * lpMI, const int size, int id);
void PrepareMenuRecursive(PMItem pMenus, int size, HMENU hMenu, wchar_t * lpLangFile, wchar_t * lpSection);
PMItem GetMItem(PMItem	lpMI, const int size, int id);
void GetMIText(MItem * lpMI, const int size, int id, wchar_t * lpText);
void GetMIReserved(MItem * lpMI, const int size, int id, wchar_t * lpRes);
void FrameSkinlessNote(HDC hdc, LPRECT lprc, COLORREF clr);
HWND GetUnvisibleNoteEdit(wchar_t * lpID);
DWORD InStreamCallback(DWORD_PTR dwCookie, LPBYTE pbBuff, LONG cb, LONG *pcb);
void ReadRTFFile(wchar_t * lpID, HWND hEdit, wchar_t * lpCopyFrom);
BOOL IsTextInClipboard(void);
int DateDiff(const SYSTEMTIME d1, const SYSTEMTIME d2, ddiff diffType);
void PrepareMenuRecursiveWithAccelerators(PMItem pMenus, int size, HMENU hMenu, wchar_t * lpLangFile, wchar_t * lpSection, P_HK_TYPE lpKeys, int keysCount);
P_HK_TYPE GetHotKeyByID(int id, P_HK_TYPE phk, int count);
int ItemImageIndex(PMEMNOTE pNote);
void SetProperWeekday(int dow, wchar_t * lpType);
void ParseScheduleType(P_SCHEDULE_TYPE pS, wchar_t * lpType);
void GetScheduleDescription(int id, wchar_t * lpBuffer, const wchar_t * lpFile, const wchar_t * lpDefault);
BOOL IsDateEmpty(LPSYSTEMTIME lpd);
short RealDayOfWeek(int dof);
int __cdecl GroupMenusCompare(const void *p1, const void *p2);
int __cdecl FavMenusCompare(const void *p1, const void *p2);

DARROWS					g_DArrows;
PDHEADERS				g_DHeaders;
PNDOCK					g_DockSettings;
NOTE_RTHANDLES			g_RTHandles, g_DRTHandles;
NOTE_SETTINGS			g_NoteSettings;
NOTE_APPEARANCE			g_Appearance;
SOUND_TYPE				g_Sound;
NOTE_PATHS				g_NotePaths;
PNSTRINGS				g_Strings;
NT_DT_FORMATS			g_DTFormats;
FONT_TYPE				g_SelectedFont;
// PMItem					g_PMNote, g_PMEdit;
HBITMAP					g_hBmpMenuNormal, g_hBmpMenuGray;
BOOL					g_IsClosing;
wchar_t					g_CurrentFontFace[LF_FACESIZE];
DLGPROC					g_SearchProc, g_SearchTitlesProc;
HFONT					g_hMenuFont;
HMENU					g_hNoteMainMenu, g_hNotePopUp;
HMENU					g_hEditMainMenu, g_hEditPopUp;
HMENU					g_hSizePopUp, g_hDropMenu, g_hDropPopUp;
HWND					g_hCPDialog, g_hComboDialog;
HWND					g_hSearchDialog, g_hAdjust, g_hMain;
HWND					g_hFindDialog, g_hSearchTitlesDialog, g_hOverdueDialog;
wchar_t					g_SearchString[256], g_ReplaceString[256];
wchar_t					g_DefBrowser[MAX_PATH];
int						g_Flags;
HINSTANCE				g_hInstance;
int						g_FormatColorID, g_FormatHighlightID, g_ColorsMenuID;
wchar_t					* g_Weekdays[7], * g_RepParts[7];
EMPTY_NOTES				g_Empties;
PAGESETUPDLGW			g_pSetup;
PRINTDLGW				g_pPdlg;
HANDLE					g_hHeap;
int						g_OverdueCount;
HCURSOR					g_CurV, g_CurH;
#endif	// SHARED_H__
